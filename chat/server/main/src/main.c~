/*
 *  main.c
 *
 *  Created on: 2011-7-27
 *      Author: WangXun
 */ 

#include "../../include/myhead.h" 

/* 主函数 */
int main(void)
{
    int lfd; /* 服务器对应套接字 */
    int cfd; /* 客户端对应套接字 */
    int sfd; /* 当前处理的套接字 */
    int rdy; /* 设置读取的文件描述符 */
    struct sockaddr_in sin; /* 服务器地址结构体 */
    struct sockaddr_in cin; /* 客户端地址结构体 */
    int client[FD_SETSIZE]; /* 客户端连接的套接字描述符数组 */
    char log[1024]; /* 登录日志 */
    int maxi;
    int maxfd; /* 最大连接数 */
    fd_set rset; /* 在读的描述符集合 */
    fd_set allset; /* 所有的描述符集合 */
    socklen_t addr_len; /*  地址结构长度 */
    int i;
    int n;
    int opt = 1; /*  套接字选项 */
    Message msg; /* 数据包结构体 */
    LNode *s1; /* 保存在线用户的链表 */
    LNode *s2; /* 保存禁言用户的链表 */
    LNode *p1; /* 用来遍历链表的指针 */
    s1 = (LNode *) malloc(sizeof(LNode));
    s1->next = NULL;
    s2 = (LNode *) malloc(sizeof(LNode));
    s2->next = NULL;

    /* 对server_addr_in  结构进行赋值  */
    bzero(&sin, sizeof(struct sockaddr_in)); /*  先清零 */
    sin.sin_family = AF_INET; /* IPV4 */
    sin.sin_addr.s_addr = htonl(INADDR_ANY); /* 表示接受任何ip地址   将ip地址转换成网络字节序 */
    sin.sin_port = htons(port); /* 将端口号转换成网络字节序 */

    /* 调用socket函数创建一个TCP协议套接口 */
    if ((lfd = socket(AF_INET,SOCK_STREAM, 0)) == -1) /*  AF_INET:IPV4;SOCK_STREAM:TCP */
    {
        fprintf(stderr,"Socket error:%s\n\a", strerror(errno));
        exit(1);
    }

    /*设置套接字选项 使用默认选项*/
    setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));

    /* 调用bind函数 将serer_addr结构绑定到sockfd上  */
    if (bind(lfd, (struct sockaddr *) (&sin), sizeof(struct sockaddr)) == -1)
    {
        fprintf(stderr,"Bind error:%s\n\a", strerror(errno));
        exit(1);
    }

    /* 开始监听端口   等待客户的请求 */
    if (listen(lfd, 20) == -1)
    {
        fprintf(stderr,"Listen error:%s\n\a", strerror(errno));
        exit(1);
    }

    printf("Accepting connections .......\n");

    maxfd = lfd; /*对最大文件描述符进行初始化*/
    maxi = -1;

    /*初始化客户端连接描述符集合*/
    for (i = 0; i < FD_SETSIZE; i++)
    {
        client[i] = -1;
    }

    FD_ZERO(&allset); /* 清空文件描述符集合 */
    FD_SET(lfd,&allset);
    /* 将监听字设置在集合内 */

    /* 开始服务程序的死循环 */
    while (1)
    {
        FD_SET(0,&allset);
        rset = allset;

        /*得到当前可以读的文件描述符数*/
        rdy = select(maxfd + 1, &rset, NULL, NULL, NULL);

        if(FD_ISSET(lfd, &rset))
        {
            addr_len = sizeof(sin);

            /* 接受客户端的请求 */
            if((cfd=accept(lfd,(struct sockaddr *)(&cin),&addr_len))==-1)
            {
                fprintf(stderr,"Accept error:%s\n\a",strerror(errno));
                exit(1);
            }

            /*查找一个空闲位置*/
            for(i = 0; i<FD_SETSIZE; i++)
            {
                if(client[i] <0)
                {
                    client[i] = cfd; /* 将处理该客户端的连接套接字设置到该位置 */
                    break;
                }
            }

            /* 太多的客户端连接   服务器拒绝俄请求  跳出循环 */
            if(i == FD_SETSIZE)
            {
                printf("too many clients");
                exit(1);
            }

            FD_SET(cfd, &allset); /* 设置连接集合 */

            if(cfd> maxfd) /* 新的连接描述符 */
            {
                maxfd = cfd;
            }

            if(i> maxi)
            {
                maxi = i;
            }

            if(--rdy <= 0) /* 减少一个连接描述符 */
            {
                continue;
            }

        }

        /* 处理每一个在读的套接字 */
        for(i = 0;i< FD_SETSIZE;i++)
        {
            if((sfd = client[i]) < 0)
            {
                continue;
            }
            if(FD_ISSET(sfd, &rset))
            {
                n = read(sfd,&msg,sizeof(Message));

                /* 如果读取失败则表示客户端已经关闭 */
                if(n == 0)
                {
                    p1 = s1->next;
                    while(p1 !=NULL)
                    {
                        if(p1->fd == sfd)
                        {
                            printf("the  %s client has been closed. \n",p1->user);
                            strcpy(log,p1->user);
                            strcat(log,"在");

                            /* 保存下线日志 */
                            time_t t;
                            time(&t);
                            strcat(log,ctime(&t));
                            strcat(log,"成功下线\n");
                            Save_log(log);

                            break;
                        }
                        p1 = p1->next;
                    }
                    fflush(stdout);/* 刷新 输出终端 */
                    close(sfd);
                    FD_CLR(sfd, &allset); /*清空连接描述符数组*/
                    client[i] = -1;
                    del(s1,sfd); /* 从登录链表中删除 */
                    del(s2,sfd); /* 从禁言链表中删除 */
                }
                else
                {
                    printf("recieve the message success!\n");
                    printf("msg->action=%d\n",msg.action);

                    /* 根据不同的动作来执行不同的函数 */
                    switch(msg.action)
                    {
                        case (LOGIN) :
                        {
                            Log(&msg,s1,sfd);

                        }break;
                        case (REGIST) :
                        {
                            Regist(&msg,sfd);

                        }break;
                        case (CHATONE) :
                        {
                            Chatone(s1, s2,sfd, &msg);

                        }break;
                        case (CHATALL) :
                        {
                            Chatall(s1, s2,sfd, &msg);

                        }break;
                        case (CHECK) :
                        {
                            Check(s1, sfd, &msg);

                        }break;
                        case (SLIENCE):
                        {
                            Slience(s1,s2,sfd, &msg);
                        }break;
                        case (PERMITE):
                        {
                            Permite(s1,s2,sfd, &msg);
                        }break;
                        case(TICK):
                        {
                            Tick(s1, s2, sfd, &msg);
                        }break;
                        case (EXPRESSION) :
                        {
                            Expression(s1, s2, sfd, &msg);
                        }break;
                        case (PHRASE) :
                        {
                            Phrase(s1, s2, sfd, &msg);
                        }break;

                        /* 传输文件的一系列操作 */
                        case (TRANS_FILENAME) :
                        case (TRANS_FILEING) :
                        case (TRANS_FILE_REFUSE) :
                        case (TRANS_FILE_ACCEPT) :
                        case (TRANS_FILE_FINISH) :
                        {
                            Trans_file(s1, sfd, &msg);
                        }break;
                        default : break;
                    }
                }
            }
        }
    }
    return 0;
 }
